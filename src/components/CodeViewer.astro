---
interface Props { 
  repoUrl: string; 
  files: string[]; 
  branch?: string;
}

const { repoUrl, files, branch = "main" } = Astro.props;

// Parse GitHub URL to extract owner and repo
const match = repoUrl.match(/github\.com\/([^\/]+)\/([^\/#]+)/);
const owner = match?.[1];
const repo = match?.[2];
const baseUrl = owner && repo ? `https://raw.githubusercontent.com/${owner}/${repo}/${branch}/` : null;
---

<div style="border:1px solid rgba(255,255,255,.08);border-radius:12px;overflow:hidden">
  <!-- Tab Navigation -->
  <div style="display:flex;gap:8px;flex-wrap:wrap;padding:10px;border-bottom:1px solid rgba(255,255,255,.08)">
    {files.map((file, index) => (
      <button 
        class="tab" 
        data-file={file} 
        style={`padding:.4rem .6rem;border-radius:10px;outline:1px solid rgba(255,255,255,.15);background:${index === 0 ? '#00c2ff' : 'transparent'};color:${index === 0 ? '#051018' : '#e5e7eb'};cursor:pointer;transition:all 0.2s ease`}
      >
        {file}
      </button>
    ))}
    
    <!-- External Links -->
    <a href={repoUrl} target="_blank" rel="noopener" style="margin-left:auto" class="btn">
      GitHub
    </a>
    {owner && repo && (
      <>
        <a 
          href={`https://stackblitz.com/github/${owner}/${repo}`} 
          target="_blank" 
          rel="noopener"
          class="btn"
        >
          StackBlitz
        </a>
        <a 
          href={`https://github1s.com/${owner}/${repo}`} 
          target="_blank" 
          rel="noopener"
          class="btn"
        >
          VSCode Online
        </a>
      </>
    )}
  </div>

  <!-- Code Display -->
  <pre 
    id="codebox" 
    style="margin:0;max-height:60vh;overflow:auto;padding:16px;background:#0b0d10"
  >
    <code 
      id="code" 
      style="font:13px/1.5 ui-monospace,Consolas,Menlo,monospace;color:#cbd5e1"
    >
      Selecciona un archivo…
    </code>
  </pre>
</div>

<script>
  // Pass the baseUrl to the client-side script
  const baseUrl = JSON.stringify(baseUrl);
  
  document.addEventListener('DOMContentLoaded', function() {
    const base = JSON.parse(baseUrl);
    const codeElement = document.getElementById('code');
    const codeboxElement = document.getElementById('codebox');
    
    async function loadFile(filePath) {
      if (!base) {
        codeElement.textContent = "Repo inválido - no se puede cargar el archivo";
        return;
      }
      
      codeElement.textContent = `Cargando ${filePath}…`;
      
      try {
        const response = await fetch(base + filePath);
        if (!response.ok) {
          throw new Error(`${response.status} ${response.statusText}`);
        }
        
        const content = await response.text();
        codeElement.textContent = content;
        codeboxElement.scrollTop = 0;
        
      } catch (error) {
        codeElement.textContent = `No pude cargar ${filePath}: ${error.message}`;
      }
    }
    
    // Setup tab functionality
    const tabs = document.querySelectorAll('button.tab');
    tabs.forEach((button, index) => {
      button.addEventListener('click', () => {
        const filePath = button.dataset.file;
        loadFile(filePath);
        
        // Update tab styles
        tabs.forEach(tab => {
          tab.style.background = 'transparent';
          tab.style.color = '#e5e7eb';
        });
        button.style.background = '#00c2ff';
        button.style.color = '#051018';
      });
      
      // Load first file by default
      if (index === 0) {
        const filePath = button.dataset.file;
        loadFile(filePath);
      }
    });
  });
</script>

<style>
  .btn {
    padding: 0.4rem 0.6rem;
    border-radius: 10px;
    background: transparent;
    color: #e5e7eb;
    text-decoration: none;
    outline: 1px solid rgba(255, 255, 255, 0.15);
    transition: all 0.2s ease;
    font-size: 0.875rem;
  }
  
  .btn:hover {
    background: rgba(255, 255, 255, 0.1);
    color: #ffffff;
  }
  
  .tab:hover {
    background: rgba(0, 194, 255, 0.1) !important;
  }
</style>